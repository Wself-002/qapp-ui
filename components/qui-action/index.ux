<import name="qui-overlay" src="../qui-overlay/index"></import>

<template>
  <qui-overlay option="{{overlay}}" @qui-overlay-click="overlayClick">
    <div class="{{option.iosStyle?'qui-action-ios':''}}  {{className}}" show="{{visible}}">
      <div class="qui-action-content {{ option.iosStyle ? 'qui-action-content-ios':''}}">
        <text for="option.options" class="qui-action-item {{!$idx?'qui-action-item-first':''}}" @click="select($idx)">
          {{$item}}
        </text>
        <text class="qui-action-item qui-action-cancel" if="option.iosStyle && option.cancel" @click="cancel">
          {{option.cancel}}
        </text>
      </div>
    </div>
  </qui-overlay>
</template>

<style>
  @keyframes quiactionenter {
    0% {
      transform: translateY(100%);
    }
    100% {
      transform: translateY(0%);
    }
  }

  @keyframes quiactionleave {
    0% {
      transform: translateY(0%);
    }
    100% {
      transform: translateY(100%);
    }
  }

  .qui-action-enter {
    animation-name: quiactionenter;
  }

  .qui-action-leave {
    animation-name: quiactionleave;
  }

  .qui-action-ios {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    animation-duration: 600ms;
    animation-fill-mode: forwards;
    flex-direction: column;
  }


  .qui-action-content {
    flex-direction: column;
    width: 984px;
    border-radius: 48px;
    background-color: #ffffff;
  }

  .qui-action-content-ios {
    flex-shrink: 0;
    width: 100%;
    border-radius: 0;
    background-color: #f2f3f5;
  }

  .qui-action-item {
    padding: 0 72px;
    color: #000000;
    font-size: 42px;
    line-height: 156px;
    text-align: center;
    lines: 1;
    text-overflow: ellipsis;
    border-color: #eeeeef;
    border-top-width: 2px;
    background-color: #ffffff;
  }

  .qui-action-item-first {
    border-top-width: 0;
  }

  .qui-action-cancel {
    margin-top: 21px;
    border-top-width: 0;
  }
</style>

<script>
  /**
   * option = {
   *   show: true/false,  //是否显示
   *   background: 'rgba(0,0,0,.4)',   //遮罩层背景色
   *   autoClose: true/false  //点击遮罩层是否自动关闭
   *   iosStyle: true/false,   //是否为ios风格
   *   cancel: '取消',    //ios风格时的取消按钮文本，没有则无取消按钮
   *   options: ['xx','xxx']  //选项文本
   * }
   */
  export default {
    props: [
      'option'
    ],
    data() {
      return {
        visible: false, //show无法控制fixed后代元素的显隐，故需要单独控制
        className: '',
        overlay: {},
        defaultOption: {
          iosStyle: false,
          cancel: '取消',
          options: []
        }
      }
    },
    onInit() {
      //监控qui-overlay组件修改this.overlay的属性
      ['background', 'autoClose'].forEach(key => {
        let methodName = key.replace(/^\w/, function ($0) {
          return `updateOverlay${$0.toUpperCase()}`
        })

        this.$watch(`overlay.${key}`, methodName)
      })
        //监控this.option的属性变化
        ;['show', 'background', 'autoClose', ...Object.keys(this.defaultOption)].forEach(key => {
          let methodName = key.replace(/^\w/, function ($0) {
            return `update${$0.toUpperCase()}`
          })

          this.$watch(`option.${key}`, methodName)
          this[methodName]()
        })
    },
    updateShow() {
      if (!this.option.hasOwnProperty('show')) {
        this.$set('option.show', false)
      } else {
        clearTimeout(this.timeoutId)  //防止option.show更改太快
        clearTimeout(this.contentTimeoutId)

        if (this.option.show) {
          this.$set('overlay.show', true)
          this.visible = true
          if (this.option.iosStyle) {
            this.className = 'qui-action-enter'
          }
        } else {
          if (this.option.iosStyle) {
            this.className = 'qui-action-leave'
          }
          this.timeoutId = setTimeout(() => {
            this.$set('overlay.show', false)
          }, this.option.iosStyle ? 100 : 0)
          this.contentTimeoutId = setTimeout(() => {
            this.visible = false
          }, this.option.iosStyle === 'ios' ? 600 : 500)
        }
      }
    },
    updateBackground() {
      if (this.option.hasOwnProperty('background')) {
        this.$set('overlay.background', this.option.background)
      } else {
        let overlay = {}
        delete this.overlay.background
        Object.keys(this.overlay).forEach(key => {
          overlay[key] = this.overlay[key]
        })
        this.overlay = overlay
      }
    },
    updateAutoClose() {
      if (this.option.hasOwnProperty('autoClose')) {
        this.$set('overlay.autoClose', this.option.autoClose)
      } else {
        let overlay = {}
        delete this.overlay.autoClose
        Object.keys(this.overlay).forEach(key => {
          overlay[key] = this.overlay[key]
        })
        this.overlay = overlay
      }
    },
    updateIosStyle() {
      !this.option.hasOwnProperty('iosStyle') && this.$set('option.iosStyle', this.defaultOption.iosStyle)
    },
    updateCancel() {
      !this.option.hasOwnProperty('cancel') && this.$set('option.cancel', this.defaultOption.cancel)
    },
    updateOptions() {
      !this.option.hasOwnProperty('options') && this.$set('option.options', this.defaultOption.options)
    },
    updateOverlayBackground() {
      this.overlay.hasOwnProperty('background') && this.$set('option.background', this.overlay.background)
    },
    updateOverlayAutoClose() {
      this.overlay.hasOwnProperty('autoClose') && this.$set('option.autoClose', this.overlay.autoClose)
    },
    overlayClick() {  //用内联写法会有问题，所以用单独的方法来处理事件
      this.$emit('quiOverlayClick')
    },
    select(index) {
      this.$emit('quiSelect', { index })
    },
    cancel() {
      this.$emit('quiCancel')
    }
  }
</script>