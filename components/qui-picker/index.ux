<import name="qui-overlay" src="../qui-overlay/index"></import>

<template>
  <qui-overlay visible="{{visible}}" background="{{background}}" @qui-overlay-click="overlayClick">
    <div show="{{show}}" class="qui-picker-box {{animationClass}}" style="animation-duration: {{animationDuration}}ms;">
      <div class="bar">
        <text class="cancel" @click="cancelClick">{{cancelText}}</text>
        <text class="confirm" @click="confirmClick">{{confirmText}}</text>
      </div>
      <div class="list-box">
        <list class="list" for="(index, data) in dataList" id="list{{index}}">
          <list-item class="list-item" type="listitem" for="{{data}}" @click="setItems($idx, index)">
            <text class="list-item-text {{curSelIndexs[index] === $idx ? 'text-selected':''}}">{{$item}}</text>
          </list-item>
        </list>
      </div>
    </div>
  </qui-overlay>
</template>

<style>
  .qui-picker-box {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    width: 1080px;
    height: 886px;
    animation-fill-mode: forwards;
    background-color: #ffffff;
    flex-direction: column;
  }

  .pickerenter {
    animation-name: pickerenter;
  }

  .pickerleave {
    animation-name: pickerleave;
  }

  .bar {
    width: 100%;
    height: 156px;
    justify-content: space-between;
    align-items: center;
    border-color: #E6E6E6;
    border-style: solid;
    border-bottom-width: 2px;
  }

  .cancel {
    padding: 48px;
    font-size: 42px;
    color: #666666;
  }

  .confirm {
    padding: 48px;
    font-size: 42px;
    color: #00ACFF;
  }

  .list-box {
    flex: 1;
    width: 100%;
    justify-content: space-between;
  }

  .list {
    flex-direction: column;
    align-items: center;
  }

  .list-item {
    height: 130px;
    align-items: center;
    justify-content: center;
  }

  .list-item-text {
    font-size: 42px;
    lines: 1;
    text-overflow: ellipsis;
  }

  .text-selected {
    color: #00ACFF;
  }

  @keyframes pickerenter {
    0% {
      transform: translateY(100%);
    }
    100% {
      transform: translateY(0%);
    }
  }

  @keyframes pickerleave {
    0% {
      transform: translateY(0%);
    }
    100% {
      transform: translateY(100%);
    }
  }
</style>

<script>
  export default {
    props: {
      visible: {
        type: String,
        default: '0'
      },
      cancelText: {
        type: String,
        default: '取消'
      },
      confirmText: {
        type: String,
        default: '确定'
      },
      background: {
        type: String,
        default: 'rgba(0,0,0,0.4)'
      },
      list: {
        type: Array,
        default: []
      },
      selIndexs: {
        type: Array,
        default: []
      },
      type: {
        type: String,
        default: 'default'
      }
    },
    data() {
      return {
        show: this.visible === '1',
        animationClass: '',
        animationDuration: 400,
        dataList: [],
        curSelIndexs: []
      }
    },
    onInit() {
      this.setDefault()
      this.setDataList()
      this.toggleVisible(this.visible)
    },
    setDefault() {
      this.$watch('visible', 'toggleVisible')
    },
    setDataList() {
      let selIndexs = []
      if (this.type === 'default') {
        // 非联动模式
        this.list.forEach((item, idx) => {
          const datatype = Object.prototype.toString.call(item)
          if (datatype === '[object Array]') {
            this.dataList.push(item)
            selIndexs.push(0)
          }
        })
      } else if (this.type === 'chain') {
        // 多级联动模式
        this.setChainList(0, this.list, this.selIndexs, selIndexs)
      }

      if (this.selIndexs.length) {
        this.curSelIndexs = [...this.selIndexs]
      } else {
        this.curSelIndexs = selIndexs
      }
    },
    setChainList(idx, list, defaultIndexs, selIndexs) {
      if (!list.length) return

      this.dataList[idx] = []
      list.forEach((item, index) => {
        const datatype = Object.prototype.toString.call(item)

        if (datatype === '[object Object]') {
          this.dataList[idx].push(item.name)
          if ((defaultIndexs[idx] || 0) === index) {
            selIndexs[idx] = index
            this.setChainList(idx + 1, item.children || [], defaultIndexs, selIndexs)
          }
        }
      })
    },
    toggleVisible(visible) {
      if (this.timeoutId) clearTimeout(this.timeoutId)

      if (visible === '1') {
        this.show = true
        this.animationClass = 'pickerenter'
      } else {
        this.animationClass = 'pickerleave'
        this.timeoutId = setTimeout(() => {
          this.show = false
        }, this.animationDuration - 200)
      }
    },
    setItems(subidx, idx) {
      let selIndexs = this.curSelIndexs
      if (selIndexs[idx] === subidx) return
      selIndexs[idx] = subidx
      for (var i = idx, set = selIndexs.length - 1; i < set; i++) {
        selIndexs[i + 1] = 0
      }
      this.curSelIndexs = [...this.curSelIndexs]

      if (this.type === 'chain') {
        // 多级联动模式
        this.setChainList(0, this.list, this.curSelIndexs, [])
        this.dataList = [...this.dataList]
      }
    },
    cancelClick() {
      this.$emit('quiCancelClick')
    },
    confirmClick() {
      this.$emit('quiConfirmClick', {
        selIndexs: this.curSelIndexs
      })
    },
    overlayClick() {
      this.$emit('quiOverlayClick')
    }
  }
</script>