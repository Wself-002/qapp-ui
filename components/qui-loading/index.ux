<import name="qui-overlay" src="../qui-overlay/index"></import>

<template>
  <qui-overlay option="{{overlay}}">
    <div class="qui-loading">
      <div>
        <image src="{{option.image}}"></image>
        <text if="option.text">{{option.text}}</text>
      </div>
    </div>
  </qui-overlay>
</template>

<style>
  .qui-loading {
    width: 540px;
    justify-content: center;
  }

  .qui-loading > div {
    padding: 25px 40px;
    flex-direction: column;
    align-items: center;
    border-radius: 25px;
    background-color: rgba(71, 71, 71, .8);
  }

  .qui-loading image {
    margin: 9px 0;
  }

  .qui-loading text {
    margin-top: 7px;
    color: #ffffff;
    font-size: 34px;
  }
</style>

<script>
  import icon from './image'

  /**
   * option = {
   *   show: true/false,
   *   image: 'xx.png',  //自定义图标
   *   text: 'xx'   //文本
   * }
   */
  export default {
    props: ['option'],
    data() {
      return {
        overlay: {
          show: false,
          background: 'rgba(0,0,0,0)',
          autoClose: false
        },
        defaultOption: {
          show: false,
          image: icon,
          text: ''
        }
      }
    },
    onInit() {
      Object.keys(this.defaultOption).forEach(key => {
        let methodName = key.replace(/^\w/, function ($0) {
          return `update${$0.toUpperCase()}`
        })

        this.$watch(`option.${key}`, methodName)
        this[methodName]()
      })
    },
    updateShow() {
      if (this.option.hasOwnProperty('show')) {
        this.$set('overlay.show', this.option.show)
      } else {
        this.$set('option.show', false)
      }
    },
    updateImage() {
      !this.option.hasOwnProperty('image') && this.$set('option.image', this.defaultOption.image)
    },
    updateText() {
      !this.option.hasOwnProperty('text') && this.$set('option.text', this.defaultOption.text)
    }
  }
</script>
