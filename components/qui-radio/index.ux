<!-- Created by yzhangbao on 18/04/11. -->
<!-- qui-radio -->

<template>
  <div class="qui-radio-box">
    <block for="(index, row) in option.options">
      <div if="!(index === 0) && option.isBorder" class="border-top"></div>
      <div class="item {{option.isRight ? 'is-right' : ''}} {{row.disabled ? 'disabled' : ''}}" @click="clickAction(row)">
        <text class="name" if="option.isRight" style="font-size: {{option.labelFontSize}};color: {{option.labelColor}}">{{row.label || row}}</text>
        <stack class="radio" style="background-color: {{option.value === (row.value || row) ? option.checkedColor : option.checkColor}};border-color: {{option.value === (row.value || row) ? option.checkedBorderColor : option.checkBorderColor}}">
          <div class="thumb {{option.value === (row.value || row) ? 'open' : 'close'}}" style="background-color: {{option.value === (row.value || row) ? option.thumbCheckedColor : option.thumbCheckColor}}"></div>
        </stack>
        <text class="name" if="!option.isRight" style="margin-left: {{option.labelMargin}};font-size: {{option.labelFontSize}};color: {{option.labelColor}}">{{row.label || row}}</text>
      </div>
    </block>
  </div>
</template>

<style>
  .qui-radio-box{
    flex-direction: column;
    background-color: #ffffff;
  }
  .border-top {
    margin-left: 20px;
    height: 1px;
    background-color: #bbbbbb;
  }
  .item {
    padding: 30px 40px;
  }
  .is-right {
    justify-content: space-between;
  }
  .disabled .radio {
    opacity: .5;
  }
  .radio {
    align-items: center;
    justify-content: center;
    width: 60px;
    height: 60px;
    border-radius: 30px;
    border-width: 4px;
  }
  .thumb {
    width: 36px;
    height: 36px;
    border-radius: 36px;
  }
  @keyframes open {
    from {
      transform: scale(0);
    }
    to {
      transform: scale(1);
    }
  }
  .open {
    animation-name: open;
    animation-duration: 0ms;
    animation-fill-mode: forwards;
  }
  @keyframes close {
    from {
      transform: scale(1);
    }
    to {
      transform: scale(0);
    }
  }
  .close {
    animation-name: close;
    animation-duration: 0ms;
    animation-fill-mode: forwards;
  }
</style>

<script>
  export default {
    props: ['option'],
    data: {
      defaultData: {
        value: '',
        options: [],
        labelMargin: '30px',
        labelFontSize: '44px',
        labelColor: '#000000',
        isRight: false,
        isBorder: true,
        checkColor: '#FFFFFF',
        checkedColor: '#FFFFFF',
        checkBorderColor: '#CCCCCC',
        checkedBorderColor: '#2998F9',
        thumbCheckColor: 'transparent',
        thumbCheckedColor: '#2998F9'
      }
    },
    onInit() {
      this.setDefault()
    },
    onReady() {
      this.$watch('option.value', 'change')
    },
    setDefault() {
      for (var key in this.defaultData) {
        if (this.defaultData[key] !== undefined && this.option && this.option[key] === undefined) {
          this.$set(`option.${key}`, this.defaultData[key])
        }
      }
    },
    clickAction(data) {
      if (typeof data === 'object') {
        if (!data.disabled) {
          this.option.value = data.value
        }
      }
      else {
        this.option.value = data
      }
    },
    change() {
      this.$emit('quiRadioChange', {values: this.option.value})
    }
  }
</script>
