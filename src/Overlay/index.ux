<import name="qui-toast" src="@qapp-ui/qui-toast/index"></import>
<import name="qui-overlay" src="@qapp-ui/qui-overlay/index"></import>
<import name='qui-switch' src='@qapp-ui/qui-switch/index'></import>

<template>
  <div class="page-doc">
    <qui-overlay option="{{overlay}}" @qui-overlay-click="overlayClick">
    </qui-overlay>
    <qui-toast id="qui-toast"></qui-toast>
    <div class="item-box">
      <div class="item no-bor">
        <text class="item-dt">显示overlay</text>
        <qui-switch option="{{data}}" @qui-switch-change="toggle"></qui-switch>
      </div>
      <div class="item">
        <text class="item-dt">点击蒙层是否自动关闭</text>
        <qui-switch option="{{data1}}" @qui-switch-change="autoClose"></qui-switch>
      </div>
    </div>
    <div class="item-box">
      <div class="item no-bor">
        <div class="background">
          <text class="item-dt">蒙层背景色
            <span class="item-dt">{{overlay.background}}</span>
          </text>
          <div>
            <div class="margin-top">
              <text class="item-dw">r(
                <span>{{r}}</span>)：</text>
              <slider max="255" value="{{r}}" @change="rfn" class="selected"></slider>
            </div>
            <div class="margin-top">
              <text class="item-dw">g(
                <span>{{g}}</span>)：</text>
              <slider max="255" value="{{g}}" @change="gfn" class="selected"></slider>
            </div>
            <div class="margin-top">
              <text class="item-dw">b(
                <span>{{b}}</span>)：</text>
              <slider max="255" value="{{b}}" @change="bfn" class="selected"></slider>
            </div>
            <div class="margin-top">
              <text class="item-dw">a(
                <span>{{a / 100}}</span>)：</text>
              <slider max="100" value="{{a}}" @change="afn" class="selected"></slider>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div>
</template>

<style>
  .page-doc {
    flex: 1;
    flex-direction: column;
    background-color: #eeeeee;
  }


  .item-box {
    flex-direction: column;
    border-color: #bbbbbb;
    border-top-width: 1px;
    border-bottom-width: 1px;
    background-color: #ffffff;
    margin-bottom: 60px;
  }

  .item {
    justify-content: space-between;
    align-items: center;
    margin-left: 20px;
    padding: 30px 40px 30px 20px;
    border-color: #bbbbbb;
    border-top-width: 1px;
  }

  .no-bor {
    border-top-width: 0;
  }

  .selected {
    selected-color: #0F8DE8;
  }

  .margin-top {
    margin-top: 30px;
  }

  .item-dt {
    font-size: 44px;
    color: #333333;
  }

  .item-dw {
    font-size: 44px;
    color: #333333;
    width: 250px;
  }

  .page>div {
    margin-bottom: 50px;
  }

  .page>div>text {
    width: 600px;
  }

  .background {
    flex-direction: column;
  }


  .background>div,
  .function>div {
    flex-direction: column;
    margin-left: 30px;
  }

  .background>div>div,
  .function>div>div {
    margin-bottom: 20px;
  }

  .background slider {
    width: 350px;
  }

  slider {
    width: 500px;
  }
</style>

<script>
  export default {
    private: {
      data: {
        disabled: false,
        value: false
      },
      data1: {
        disabled: false,
        value: true
      },
      overlay: {},
      r: 0,
      g: 0,
      b: 0,
      a: 0,
    },
    onInit() {
      this.$page.setTitleBar({ text: 'Overlay' })
    },
    onReady() {
      let rgba = this.overlay.background.replace(/^.*\((.*)\).*$/, '$1').split(',')

      this.r = parseFloat(rgba[0])
      this.g = parseFloat(rgba[1])
      this.b = parseFloat(rgba[2])
      this.a = parseFloat(rgba[3]) * 100
      this.toast = this.$child('qui-toast')
    },
    onBackPress() {
      if (this.overlay.show) {
        this.overlay.show = false
        this.data.value = false
        return true
      }
    },
    toggle(event) {
      this.data.value = event.detail.value
      this.overlay.show = event.detail.value
    },
    rfn(event) {
      this.r = event.progress
      this.overlay.background = `rgba(${this.r},${this.g},${this.b},${this.a})`
    },
    gfn(event) {
      this.g = event.progress
      this.overlay.background = `rgba(${this.r},${this.g},${this.b},${this.a})`
    },
    bfn(event) {
      this.b = event.progress
      this.overlay.background = `rgba(${this.r},${this.g},${this.b},${this.a})`
    },
    afn(event) {
      this.a = event.progress
      this.overlay.background = `rgba(${this.r},${this.g},${this.b},${this.a / 100})`
    },
    duration(event) {
      this.overlay.duration = event.progress
    },
    timeFn(event) {
      this.overlay.timingFunction = event.value
    },
    autoClose(event) {
      // this.overlay.autoClose = event.checked
      this.data1.value = event.detail.value
      this.overlay.autoClose = event.detail.value
    },
    overlayClick() {
      this.data.value = this.overlay.show
      this.toast.show({
        text: '点击了蒙层'
      })
    }
  }
</script>